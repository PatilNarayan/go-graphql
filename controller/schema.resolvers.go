package controller

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"
	"go_graphql/graph/model"
)

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.CreateRoleInput) (*model.Role, error) {
	panic(fmt.Errorf("not implemented: CreateRole - createRole"))
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, input model.UpdateRoleInput) (*model.Role, error) {
	panic(fmt.Errorf("not implemented: UpdateRole - updateRole"))
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRole - deleteRole"))
}

// CreatePermission is the resolver for the createPermission field.
func (r *mutationResolver) CreatePermission(ctx context.Context, input model.CreatePermissionInput) (*model.Permission, error) {
	panic(fmt.Errorf("not implemented: CreatePermission - createPermission"))
}

// UpdatePermission is the resolver for the updatePermission field.
func (r *mutationResolver) UpdatePermission(ctx context.Context, input model.UpdatePermissionInput) (*model.Permission, error) {
	panic(fmt.Errorf("not implemented: UpdatePermission - updatePermission"))
}

// DeletePermission is the resolver for the deletePermission field.
func (r *mutationResolver) DeletePermission(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePermission - deletePermission"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, input model.CreateGroupInput) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: CreateGroup - createGroup"))
}

// UpdateGroup is the resolver for the updateGroup field.
func (r *mutationResolver) UpdateGroup(ctx context.Context, input model.UpdateGroupInput) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: UpdateGroup - updateGroup"))
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteGroup - deleteGroup"))
}

// CreateRoot is the resolver for the createRoot field.
func (r *mutationResolver) CreateRoot(ctx context.Context, input model.CreateRootInput) (*model.Root, error) {
	panic(fmt.Errorf("not implemented: CreateRoot - createRoot"))
}

// UpdateRoot is the resolver for the updateRoot field.
func (r *mutationResolver) UpdateRoot(ctx context.Context, input model.UpdateRootInput) (*model.Root, error) {
	panic(fmt.Errorf("not implemented: UpdateRoot - updateRoot"))
}

// DeleteRoot is the resolver for the deleteRoot field.
func (r *mutationResolver) DeleteRoot(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRoot - deleteRoot"))
}

// CreateTenant is the resolver for the createTenant field.
func (r *mutationResolver) CreateTenant(ctx context.Context, input model.CreateTenantInput) (*model.Tenant, error) {
	panic(fmt.Errorf("not implemented: CreateTenant - createTenant"))
}

// UpdateTenant is the resolver for the updateTenant field.
func (r *mutationResolver) UpdateTenant(ctx context.Context, input model.UpdateTenantInput) (*model.Tenant, error) {
	panic(fmt.Errorf("not implemented: UpdateTenant - updateTenant"))
}

// DeleteTenant is the resolver for the deleteTenant field.
func (r *mutationResolver) DeleteTenant(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTenant - deleteTenant"))
}

// CreateClientOrganizationUnit is the resolver for the createClientOrganizationUnit field.
func (r *mutationResolver) CreateClientOrganizationUnit(ctx context.Context, input model.CreateClientOrganizationUnitInput) (*model.ClientOrganizationUnit, error) {
	panic(fmt.Errorf("not implemented: CreateClientOrganizationUnit - createClientOrganizationUnit"))
}

// UpdateClientOrganizationUnit is the resolver for the updateClientOrganizationUnit field.
func (r *mutationResolver) UpdateClientOrganizationUnit(ctx context.Context, input model.UpdateClientOrganizationUnitInput) (*model.ClientOrganizationUnit, error) {
	panic(fmt.Errorf("not implemented: UpdateClientOrganizationUnit - updateClientOrganizationUnit"))
}

// DeleteClientOrganizationUnit is the resolver for the deleteClientOrganizationUnit field.
func (r *mutationResolver) DeleteClientOrganizationUnit(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteClientOrganizationUnit - deleteClientOrganizationUnit"))
}

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input model.CreateAccountInput) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: CreateAccount - createAccount"))
}

// UpdateAccount is the resolver for the updateAccount field.
func (r *mutationResolver) UpdateAccount(ctx context.Context, input model.UpdateAccountInput) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: UpdateAccount - updateAccount"))
}

// DeleteAccount is the resolver for the deleteAccount field.
func (r *mutationResolver) DeleteAccount(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAccount - deleteAccount"))
}

// CreateBinding is the resolver for the createBinding field.
func (r *mutationResolver) CreateBinding(ctx context.Context, input model.CreateBindingInput) (*model.Binding, error) {
	panic(fmt.Errorf("not implemented: CreateBinding - createBinding"))
}

// UpdateBinding is the resolver for the updateBinding field.
func (r *mutationResolver) UpdateBinding(ctx context.Context, input model.UpdateBindingInput) (*model.Binding, error) {
	panic(fmt.Errorf("not implemented: UpdateBinding - updateBinding"))
}

// DeleteBinding is the resolver for the deleteBinding field.
func (r *mutationResolver) DeleteBinding(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBinding - deleteBinding"))
}

// GetPrincipal is the resolver for the getPrincipal field.
func (r *queryResolver) GetPrincipal(ctx context.Context, id string) (model.Principal, error) {
	panic(fmt.Errorf("not implemented: GetPrincipal - getPrincipal"))
}

// AllPrincipals is the resolver for the allPrincipals field.
func (r *queryResolver) AllPrincipals(ctx context.Context) ([]model.Principal, error) {
	panic(fmt.Errorf("not implemented: AllPrincipals - allPrincipals"))
}

// GetOrganization is the resolver for the getOrganization field.
func (r *queryResolver) GetOrganization(ctx context.Context, id string) (model.Organization, error) {
	panic(fmt.Errorf("not implemented: GetOrganization - getOrganization"))
}

// AllOrganizations is the resolver for the allOrganizations field.
func (r *queryResolver) AllOrganizations(ctx context.Context) ([]model.Organization, error) {
	panic(fmt.Errorf("not implemented: AllOrganizations - allOrganizations"))
}

// GetResource is the resolver for the getResource field.
func (r *queryResolver) GetResource(ctx context.Context, id string) (model.Resource, error) {
	panic(fmt.Errorf("not implemented: GetResource - getResource"))
}

// AllResources is the resolver for the allResources field.
func (r *queryResolver) AllResources(ctx context.Context) ([]model.Resource, error) {
	panic(fmt.Errorf("not implemented: AllResources - allResources"))
}

// GetPermission is the resolver for the getPermission field.
func (r *queryResolver) GetPermission(ctx context.Context, id string) (*model.Permission, error) {
	panic(fmt.Errorf("not implemented: GetPermission - getPermission"))
}

// AllPermissions is the resolver for the allPermissions field.
func (r *queryResolver) AllPermissions(ctx context.Context) ([]*model.Permission, error) {
	panic(fmt.Errorf("not implemented: AllPermissions - allPermissions"))
}

// GetRole is the resolver for the getRole field.
func (r *queryResolver) GetRole(ctx context.Context, id string) (*model.Role, error) {
	panic(fmt.Errorf("not implemented: GetRole - getRole"))
}

// AllRoles is the resolver for the allRoles field.
func (r *queryResolver) AllRoles(ctx context.Context) ([]*model.Role, error) {
	panic(fmt.Errorf("not implemented: AllRoles - allRoles"))
}

// GetRoot is the resolver for the getRoot field.
func (r *queryResolver) GetRoot(ctx context.Context, id string) (*model.Root, error) {
	panic(fmt.Errorf("not implemented: GetRoot - getRoot"))
}

// GetTenant is the resolver for the getTenant field.
func (r *queryResolver) GetTenant(ctx context.Context, id string) (*model.Tenant, error) {
	panic(fmt.Errorf("not implemented: GetTenant - getTenant"))
}

// AllTenants is the resolver for the allTenants field.
func (r *queryResolver) AllTenants(ctx context.Context) ([]*model.Tenant, error) {
	panic(fmt.Errorf("not implemented: AllTenants - allTenants"))
}

// GetClientOrganizationUnit is the resolver for the getClientOrganizationUnit field.
func (r *queryResolver) GetClientOrganizationUnit(ctx context.Context, id string) (*model.ClientOrganizationUnit, error) {
	panic(fmt.Errorf("not implemented: GetClientOrganizationUnit - getClientOrganizationUnit"))
}

// AllClientOrganizationUnits is the resolver for the allClientOrganizationUnits field.
func (r *queryResolver) AllClientOrganizationUnits(ctx context.Context) ([]*model.ClientOrganizationUnit, error) {
	panic(fmt.Errorf("not implemented: AllClientOrganizationUnits - allClientOrganizationUnits"))
}

// GetAccount is the resolver for the getAccount field.
func (r *queryResolver) GetAccount(ctx context.Context, id string) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: GetAccount - getAccount"))
}

// AllAccounts is the resolver for the allAccounts field.
func (r *queryResolver) AllAccounts(ctx context.Context) ([]*model.Account, error) {
	panic(fmt.Errorf("not implemented: AllAccounts - allAccounts"))
}

// GetBinding is the resolver for the getBinding field.
func (r *queryResolver) GetBinding(ctx context.Context, id string) (*model.Binding, error) {
	panic(fmt.Errorf("not implemented: GetBinding - getBinding"))
}

// AllBindings is the resolver for the allBindings field.
func (r *queryResolver) AllBindings(ctx context.Context) ([]*model.Binding, error) {
	panic(fmt.Errorf("not implemented: AllBindings - allBindings"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
