scalar UUID

enum RoleTypeEnum {
  DEFAULT
  CUSTOM
}

interface Resource {
  id: UUID!
  name: String!
  createdAt: String!
  updatedAt: String
}

interface Organization {
  id: UUID!
  name: String!
  description: String
}

type Tenant implements Resource & Organization {
  id: UUID!
  name: String!
  createdAt: String!
  updatedAt: String
  description: String
  parentOrg: Organization!
  contactInfo: ContactInfo
}

type ContactInfo {
  id: UUID!
  email: String
  phoneNumber: String
  address: Address
}

input TenantInput {
  name: String!
  description: String
  parentOrgId: UUID!
  contactInfoId: UUID!
}

type Address {
  id: UUID!
  street: String
  city: String
  state: String
  zipCode: String
  country: String
}

input AddressInput {
  street: String
  city: String
  state: String
  zipCode: String
  country: String
}

type Role implements Resource {
  id: UUID!
  name: String!
  createdAt: String!
  updatedAt: String
  version: String!
  description: String
  permissions: [String!]!
  roleType: RoleTypeEnum!
  assignableScope: Resource!
}

input RoleInput {
  name: String!
  version: String!
  description: String
  permissions: [String!]!
  roleType: RoleTypeEnum!
  assignableScopeRef: UUID!
}

type Group {
  id: UUID!
  name: String!
  tenant: Tenant!
  createdAt: String
  updatedAt: String
}

input GroupInput {
  name: String!
  tenantId: UUID!
}

type Query {
  organizations: [Organization!]!
  getOrganization(id: UUID!): Organization
  tenants: [Tenant!]!
  getTenant(id: UUID!): Tenant
  groups: [Group!]!
  getGroup(id: UUID!): Group
  roles: [Role!]!
  getRole(id: UUID!): Role
}

type Mutation {
  createOrganization(name: String!): Organization!
  createTenant(input: TenantInput!): Tenant!
  updateTenant(id: UUID!, input: TenantInput!): Tenant!
  deleteTenant(id: UUID!): Boolean!
  createGroup(input: GroupInput!): Group!
  updateGroup(id: UUID!, input: GroupInput!): Group!
  deleteGroup(id: UUID!): Boolean!
  createRole(input: RoleInput!): Role!
  updateRole(id: UUID!, input: RoleInput!): Role!
  deleteRole(id: UUID!): Boolean!
}
