scalar UUID

enum RoleTypeEnum {
  DEFAULT
  CUSTOM
}

interface Resource {
  id: UUID!
  name: String!
  created_at: String!
  updated_at: String
}

interface Organization {
  id: UUID!
  name: String!
  description: String
}

type Tenant implements Resource & Organization {
  id: UUID!
  name: String!
  parentOrgId: UUID!
  metadata: String
  parentTenantId: String
  description: String
  resourceId: String
  created_at: String!
  updated_at: String
  updated_by: String
  contactInfo: ContactInfo
  created_by: String
}

type ContactInfo {
  id: UUID!
  email: String
  phoneNumber: String
  address: Address
}

input TenantInput {
  name: String!
  description: String
  parentOrgId: UUID!
  metadata: String
  parentTenantId: String
  resourceId: String
  contactInfoId: UUID!
  created_by: String
  updated_by: String
}

type Address {
  id: UUID!
  street: String
  city: String
  state: String
  zipCode: String
  country: String
}

input AddressInput {
  street: String
  city: String
  state: String
  zipCode: String
  country: String
}

type Role implements Resource {
  id: UUID!
  name: String!
  permissions_ids: [String]!
  description: String
  version: String
  roleType: RoleTypeEnum!
  assignableScope: Resource!
  created_at: String!
  created_by: String
  updated_at: String
  updated_by: String
}

input RoleInput {
  name: String!
  description: String
  version: String
  created_by: String!
  updated_by: String
  permissions_ids: [String!]!
  roleType: RoleTypeEnum!
  assignableScopeRef: UUID!
}

type Permission {
  id: UUID!
  name: String!
  service_id: String
  action: String
  created_at: String!
  created_by: String!
  updated_at: String
  updated_by: String
}

type Group {
  id: UUID!
  name: String!
  tenant: Tenant!
  created_at: String
  updated_at: String
}

input GroupInput {
  name: String!
  tenantId: UUID!
}

type Query {
  organizations: [Organization!]!
  getOrganization(id: UUID!): Organization
  tenants: [Tenant!]!
  getTenant(id: UUID!): Tenant
  groups: [Group!]!
  getGroup(id: UUID!): Group
  roles: [Role!]!
  getRole(id: UUID!): Role
  getPermission:[Permission]
}

type Mutation {
  createOrganization(name: String!): Organization!
  createTenant(input: TenantInput!): Tenant!
  updateTenant(id: UUID!, input: TenantInput!): Tenant!
  deleteTenant(id: UUID!): Boolean!
  createGroup(input: GroupInput!): Group!
  updateGroup(id: UUID!, input: GroupInput!): Group!
  deleteGroup(id: UUID!): Boolean!
  createRole(input: RoleInput!): Role!
  updateRole(id: UUID!, input: RoleInput!): Role!
  deleteRole(id: UUID!): Boolean!

  
  # createPermission() 
  # deletePermission() 
  # updatePermission()

  # createPrincipal()
  # deletePrincipal()
  # updatePrincipal()

  # createRoleAssignment()
  # deleteRoleAssignment()
  # updateRoleAssignment() 

}
