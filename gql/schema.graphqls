scalar Date
scalar UUID

interface Resource {
  id: UUID!
  name: String!
  created_at: String!
  updated_at: String
  created_by: String
  updated_by: String
}

interface Organization {
  id: UUID!
  name: String!
  description: String
  created_at: String!
  updated_at: String
  created_by: String
  updated_by: String
}

type Root implements Resource & Organization {
  id: UUID!
  name: String!
  description: String
  created_at: String!
  updated_at: String
  created_by: String
  updated_by: String
}

input CreateRootInput {
  name: String!
  description: String
}

input UpdateRootInput {
  id: UUID!
  name: String
  description: String
}

type Tenant implements Resource & Organization {
  id: UUID!
  name: String!
  description: String
  parentOrg: Organization
  contactInfo: ContactInfo
  created_at: String!
  updated_at: String
  created_by: String
  updated_by: String
}

type ContactInfo {
  email: String
  phoneNumber: String
  address: Address
}

input ContactInfoInput {
  email: String
  phoneNumber: String
  address: CreateAddressInput
}

input CreateTenantInput {
  name: String!
  description: String
  parentOrgId: UUID
  contactInfo: ContactInfoInput
  createdBy: String!
}

input UpdateTenantInput {
  id: UUID!
  name: String
  description: String
  parentOrgId: String
  contactInfo: ContactInfoInput
  updatedBy: String!
}

type Address {
  street: String
  city: String
  state: String
  zipCode: String
  country: String
}

input CreateAddressInput {
  street: String
  city: String
  state: String
  zipCode: String
  country: String
}

input UpdateAddressInput {
  street: String
  city: String
  state: String
  zipCode: String
  country: String
}

type ClientOrganizationUnit implements Resource & Organization {
  id: UUID!
  name: String!
  description: String
  tenant: Tenant!
  parentOrg: Organization!
  created_at: String!
  updated_at: String
  created_by: String
  updated_by: String
}

input CreateClientOrganizationUnitInput {
  name: String!
  description: String
  tenantId: String!
  parentOrgId: String!
}

input UpdateClientOrganizationUnitInput {
  id: UUID!
  name: String
  description: String
  tenantId: String
  parentOrgId: String
}

type Query {
  # getOrganization(id: UUID!): Organization
  # allOrganizations: [Organization!]!

  # getResource(id: UUID!): Resource
  # allResources: [Resource!]!

  # getRoot(id: UUID!): Root

  getTenant(id: UUID!): Tenant
  allTenants: [Tenant]

  # getClientOrganizationUnit(id: UUID!): ClientOrganizationUnit
  # allClientOrganizationUnits: [ClientOrganizationUnit!]!
}

type Mutation {
  # createRoot(input: CreateRootInput!): Root!
  # updateRoot(input: UpdateRootInput!): Root!
  # deleteRoot(id: UUID!): Boolean!

  createTenant(input: CreateTenantInput!): Tenant!
  updateTenant(input: UpdateTenantInput!): Tenant!
  deleteTenant(id: UUID!): Boolean!

  # createClientOrganizationUnit(
  #   input: CreateClientOrganizationUnitInput!
  # ): ClientOrganizationUnit!
  # updateClientOrganizationUnit(
  #   input: UpdateClientOrganizationUnitInput!
  # ): ClientOrganizationUnit!
  # deleteClientOrganizationUnit(id: UUID!): Boolean!
}
