package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"
	"go_graphql/gql/generated"
	"go_graphql/gql/models"
	"go_graphql/internal/dto"
)

// ID is the resolver for the id field.
func (r *groupResolver) ID(ctx context.Context, obj *dto.GroupEntity) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Tenant is the resolver for the tenant field.
func (r *groupResolver) Tenant(ctx context.Context, obj *dto.GroupEntity) (*dto.Tenant, error) {
	panic(fmt.Errorf("not implemented: Tenant - tenant"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *groupResolver) CreatedAt(ctx context.Context, obj *dto.GroupEntity) (*string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *groupResolver) UpdatedAt(ctx context.Context, obj *dto.GroupEntity) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, name string) (dto.Organization, error) {
	panic(fmt.Errorf("not implemented: CreateOrganization - createOrganization"))
}

// CreateTenant is the resolver for the createTenant field.
func (r *mutationResolver) CreateTenant(ctx context.Context, input models.TenantInput) (*dto.Tenant, error) {
	panic(fmt.Errorf("not implemented: CreateTenant - createTenant"))
}

// UpdateTenant is the resolver for the updateTenant field.
func (r *mutationResolver) UpdateTenant(ctx context.Context, id string, input models.TenantInput) (*dto.Tenant, error) {
	panic(fmt.Errorf("not implemented: UpdateTenant - updateTenant"))
}

// DeleteTenant is the resolver for the deleteTenant field.
func (r *mutationResolver) DeleteTenant(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTenant - deleteTenant"))
}

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, input models.GroupInput) (*dto.GroupEntity, error) {
	panic(fmt.Errorf("not implemented: CreateGroup - createGroup"))
}

// UpdateGroup is the resolver for the updateGroup field.
func (r *mutationResolver) UpdateGroup(ctx context.Context, id string, input models.GroupInput) (*dto.GroupEntity, error) {
	panic(fmt.Errorf("not implemented: UpdateGroup - updateGroup"))
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteGroup - deleteGroup"))
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input models.RoleInput) (*models.Role, error) {
	panic(fmt.Errorf("not implemented: CreateRole - createRole"))
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id string, input models.RoleInput) (*models.Role, error) {
	panic(fmt.Errorf("not implemented: UpdateRole - updateRole"))
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRole - deleteRole"))
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context) ([]dto.Organization, error) {
	panic(fmt.Errorf("not implemented: Organizations - organizations"))
}

// GetOrganization is the resolver for the getOrganization field.
func (r *queryResolver) GetOrganization(ctx context.Context, id string) (dto.Organization, error) {
	panic(fmt.Errorf("not implemented: GetOrganization - getOrganization"))
}

// Tenants is the resolver for the tenants field.
func (r *queryResolver) Tenants(ctx context.Context) ([]*dto.Tenant, error) {
	panic(fmt.Errorf("not implemented: Tenants - tenants"))
}

// GetTenant is the resolver for the getTenant field.
func (r *queryResolver) GetTenant(ctx context.Context, id string) (*dto.Tenant, error) {
	panic(fmt.Errorf("not implemented: GetTenant - getTenant"))
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context) ([]*dto.GroupEntity, error) {
	panic(fmt.Errorf("not implemented: Groups - groups"))
}

// GetGroup is the resolver for the getGroup field.
func (r *queryResolver) GetGroup(ctx context.Context, id string) (*dto.GroupEntity, error) {
	panic(fmt.Errorf("not implemented: GetGroup - getGroup"))
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context) ([]*models.Role, error) {
	panic(fmt.Errorf("not implemented: Roles - roles"))
}

// GetRole is the resolver for the getRole field.
func (r *queryResolver) GetRole(ctx context.Context, id string) (*models.Role, error) {
	panic(fmt.Errorf("not implemented: GetRole - getRole"))
}

// ID is the resolver for the id field.
func (r *tenantResolver) ID(ctx context.Context, obj *dto.Tenant) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *tenantResolver) CreatedAt(ctx context.Context, obj *dto.Tenant) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *tenantResolver) UpdatedAt(ctx context.Context, obj *dto.Tenant) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ContactInfo is the resolver for the contactInfo field.
func (r *tenantResolver) ContactInfo(ctx context.Context, obj *dto.Tenant) (*models.ContactInfo, error) {
	panic(fmt.Errorf("not implemented: ContactInfo - contactInfo"))
}

// Group returns generated.GroupResolver implementation.
func (r *Resolver) Group() generated.GroupResolver { return &groupResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Tenant returns generated.TenantResolver implementation.
func (r *Resolver) Tenant() generated.TenantResolver { return &tenantResolver{r} }

type groupResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type tenantResolver struct{ *Resolver }
