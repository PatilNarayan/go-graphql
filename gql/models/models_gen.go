// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"go_graphql/internal/dto"
	"io"
	"strconv"
)

type Address struct {
	ID      string  `json:"id"`
	Street  *string `json:"street,omitempty"`
	City    *string `json:"city,omitempty"`
	State   *string `json:"state,omitempty"`
	ZipCode *string `json:"zipCode,omitempty"`
	Country *string `json:"country,omitempty"`
}

type AddressInput struct {
	Street  *string `json:"street,omitempty"`
	City    *string `json:"city,omitempty"`
	State   *string `json:"state,omitempty"`
	ZipCode *string `json:"zipCode,omitempty"`
	Country *string `json:"country,omitempty"`
}

type ContactInfo struct {
	ID          string   `json:"id"`
	Email       *string  `json:"email,omitempty"`
	PhoneNumber *string  `json:"phoneNumber,omitempty"`
	Address     *Address `json:"address,omitempty"`
}

type GroupInput struct {
	Name     string `json:"name"`
	TenantID string `json:"tenantId"`
}

type Role struct {
	ID              string       `json:"id"`
	Name            string       `json:"name"`
	CreatedAt       string       `json:"createdAt"`
	UpdatedAt       *string      `json:"updatedAt,omitempty"`
	Version         string       `json:"version"`
	Description     *string      `json:"description,omitempty"`
	Permissions     []string     `json:"permissions"`
	RoleType        RoleTypeEnum `json:"roleType"`
	AssignableScope dto.Resource `json:"assignableScope"`
}

func (Role) IsResource() {}

type RoleInput struct {
	Name               string       `json:"name"`
	Version            string       `json:"version"`
	Description        *string      `json:"description,omitempty"`
	Permissions        []string     `json:"permissions"`
	RoleType           RoleTypeEnum `json:"roleType"`
	AssignableScopeRef string       `json:"assignableScopeRef"`
}

type TenantInput struct {
	Name          string  `json:"name"`
	Description   *string `json:"description,omitempty"`
	ParentOrgID   string  `json:"parentOrgId"`
	ContactInfoID string  `json:"contactInfoId"`
}

type RoleTypeEnum string

const (
	RoleTypeEnumDefault RoleTypeEnum = "DEFAULT"
	RoleTypeEnumCustom  RoleTypeEnum = "CUSTOM"
)

var AllRoleTypeEnum = []RoleTypeEnum{
	RoleTypeEnumDefault,
	RoleTypeEnumCustom,
}

func (e RoleTypeEnum) IsValid() bool {
	switch e {
	case RoleTypeEnumDefault, RoleTypeEnumCustom:
		return true
	}
	return false
}

func (e RoleTypeEnum) String() string {
	return string(e)
}

func (e *RoleTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleTypeEnum", str)
	}
	return nil
}

func (e RoleTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
