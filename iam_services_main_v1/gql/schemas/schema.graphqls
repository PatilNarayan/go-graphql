scalar DateTime # ISO 8601 formatted date-time string
scalar UUID # Universally Unique Identifier
# Custom JSON scalar type to handle arbitrary JSON data
# Represents any arbitrary JSON-encoded object or array


scalar JSON


# Define a union for the possible "data" types
union Data =    Root | Tenant | Role | Permission | ClientOrganizationUnit | Account


union OperationResult = SuccessResponse | ErrorResponse


# Standard Response Interface for both success and error responses
interface Response {
  """Indicates if the operation was successful."""
  success: Boolean!


  """A message providing additional context or information about the operation."""
  message: String!
}


# Success Response for a generic operation
type SuccessResponse implements Response {
  """Indicates if the operation was successful."""
  success: Boolean!


   """A message providing additional context or information about the operation."""
  message: String!


  """The data returned from the operation."""
  data: [Data]
}



# Define ErrorResponse for error cases
type ErrorResponse implements Response {
  success: Boolean!
  message: String!
  errorCode: String!
  errorDetails: JSON
}




interface Principal {
  id: UUID!
  name: String!
  email: String!
  tenant: Tenant!
}


interface Resource {
  id: UUID!
  name: String!
  createdAt: DateTime! # Timestamp of creation
  updatedAt: DateTime! # Timestamp of last update
  createdBy: UUID! # Identifier of the user who created the record
  updatedBy: UUID! # Identifier of the user who last updated the record
}


interface Organization {
  id: UUID!
  name: String!
  description: String
  parentOrg: Organization
  createdAt: DateTime! # Timestamp of creation
  updatedAt: DateTime! # Timestamp of last update
  createdBy: UUID! # Identifier of the user who created the record
  updatedBy: UUID! # Identifier of the user who last updated the record
}


type Query {
  # getOrganization(id: UUID!): OperationResult
  # allOrganizations: OperationResult


  # getResource(id: UUID!): OperationResult
  # allResources: OperationResult


  # getRoot(id: UUID!): OperationResult


  getTenant(id: UUID!): OperationResult
  allTenants: OperationResult


  getRole(id: UUID!): OperationResult
  allRoles: OperationResult


  # getAllPermissions: OperationResult
  # getPermission(id: UUID!): OperationResult


  # getClientOrganizationUnit(id: UUID!): OperationResult
  # allClientOrganizationUnits: OperationResult


  # getBinding(id: UUID!): OperationResult
  # allBindings: OperationResult


  # getAccount(id: UUID!): OperationResult
  # allAccounts: OperationResult
}


type Mutation {
  # createRoot(input: CreateRootInput!): OperationResult
  # updateRoot(input: UpdateRootInput!): OperationResult
  # deleteRoot(id: UUID!): OperationResult


  createTenant(input: CreateTenantInput!): OperationResult
  updateTenant(input: UpdateTenantInput!): OperationResult
  deleteTenant(id: UUID!): OperationResult


  createRole(input: CreateRoleInput!): OperationResult
  updateRole(input: UpdateRoleInput!): OperationResult
  deleteRole(id: UUID!): OperationResult


  # createPermission(input: CreatePermission!) : OperationResult
  # updatePermission(input: UpdatePermission!) : OperationResult
  # deletePermission(id: UUID!): OperationResult

}