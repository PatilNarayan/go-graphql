scalar Date
scalar UUID

interface Principal {
  id: UUID!
  name: String!
  email: String!
  tenant: Tenant!
}

"Interface of Resources"

interface Resource {
  id: UUID!
  name: String!
  createdAt: String!
  updatedAt: String
  createdBy: String
  updatedBy: String
}

"Interface of Organization"

interface Organization {
  id: UUID!
  name: String!
  description: String
  parentOrg: Organization
  createdAt: String!
  updatedAt: String
  createdBy: String
  updatedBy: String
}

type Root implements Resource & Organization {
  id: UUID!
  name: String!
  description: String
  parentOrg: Organization
  createdAt: String!
  updatedAt: String
  createdBy: String
  updatedBy: String
}

input CreateRootInput {
  name: String!
  description: String
}

input UpdateRootInput {
  id: UUID!
  name: String
  description: String
}

type Account implements Resource & Organization {
  id: UUID!
  name: String!
  createdAt: String!
  updatedAt: String
  createdBy: String
  updatedBy: String
  description: String
  parentOrg : Organization
  billingInfo: BillingInfo
}

input CreateAccountInput {
  name: String!
  description: String
  tenantId: UUID!
  parentId: UUID!
  billingInfo: CreateBillingInfoInput
}

input UpdateAccountInput {
  id: UUID!
  name: String
  description: String
  tenantId: UUID
  parentId: UUID
  billingInfo: UpdateBillingInfoInput
}

type BillingInfo {
  id: UUID!
  creditCardNumber: String!
  creditCardType: String!
  expirationDate: String!
  cvv: String!
  billingAddress: BillingAddress!
}

input CreateBillingInfoInput {
  creditCardNumber: String!
  creditCardType: String!
  expirationDate: String!
  cvv: String!
  billingAddress: CreateBillingAddressInput!
}

input UpdateBillingInfoInput {
  id: UUID!
  creditCardNumber: String!
  creditCardType: String!
  expirationDate: String!
  cvv: String!
  billingAddress: UpdateBillingAddressInput!
}

type BillingAddress {
  street: String!
  city: String!
  state: String!
  zipcode: String!
  country: String!
}

input CreateBillingAddressInput {
  street: String!
  city: String!
  state: String!
  zipcode: String!
  country: String!
}

input UpdateBillingAddressInput {
  billingInfoId: UUID!  
  street: String
  city: String
  state: String
  zipcode: String
  country: String
}

type Tenant implements Resource & Organization {
  id: UUID!
  name: String!
  description: String
  parentOrg: Organization!
  contactInfo: ContactInfo
  createdAt: String!
  updatedAt: String
  createdBy: String
  updatedBy: String
}

type ContactInfo {
  email: String
  phoneNumber: String
  address: Address
}

input ContactInfoInput {
  email: String
  phoneNumber: String
  address: CreateAddressInput
}

input CreateTenantInput {
  name: String!
  description: String
  parentOrgId: String!
  contactInfo: ContactInfoInput
}

input UpdateTenantInput {
  id: UUID!
  name: String
  description: String
  parentOrgId: String
  contactInfo: ContactInfoInput
 
}

type Address {
  street: String
  city: String
  state: String
  zipCode: String
  country: String
}

input CreateAddressInput {
  street: String
  city: String
  state: String
  zipCode: String
  country: String
}

input UpdateAddressInput {
  street: String
  city: String
  state: String
  zipCode: String
  country: String
}

type ClientOrganizationUnit implements Resource & Organization {
  id: UUID!
  name: String!
  description: String
  tenant: Tenant!
  parentOrg: Organization!
  createdAt: String!
  updatedAt: String
  createdBy: String
  updatedBy: String
}

input CreateClientOrganizationUnitInput {
  name: String!
  description: String
  tenantId: String!
  parentOrgId: String!
}

input UpdateClientOrganizationUnitInput {
  id: UUID!
  name: String
  description: String
  tenantId: String
  parentOrgId: String
}

enum RoleTypeEnum {
  DEFAULT
  CUSTOM
}

type Role implements Resource {
  id: UUID!
  name: String!
  version: String!
  description: String
  permissions: [Permission!]!
  roleType: RoleTypeEnum!
  assignableScope: Resource!
  createdAt: String!
  createdBy: String
  updatedAt: String
  updatedBy: String
}

input CreateRoleInput {
  name: String!
  version: String!
  description: String
  permissions: [String!]!
  roleType: RoleTypeEnum!
  assignableScopeRef: UUID!

}

input UpdateRoleInput {
  id: UUID!
  name: String!
  version: String!
  description: String
  permissions: [String!]!
  roleType: RoleTypeEnum!
  assignableScopeRef: UUID!
 
}


type Permission {
  id: UUID!
  name: String!
  serviceId: String
  action: String
  resource:  String!
  description: String
  createdAt: String
  createdBy: String!
  updatedAt: String
  updatedBy: String
}

input CreatePermission {
  name: String!
  serviceId: UUID!
  action: String!
resource:  String!
description: String
}

input UpdatePermission {
  id: UUID!
  name: String!
  serviceId: UUID
  action: String
  resource:  String!
  description: String
} 

type Binding {
  id: String!
  name: String!
  createdAt: String
  updatedAt: String
  createdBy: String
  updatedBy: String
  principal: Principal!
  role: Role!
  scopeRef: Resource!
  version: String!
}

input CreateBindingInput {
  name: String!
  principalId: String!
  roleId: String!
  scopeRefId: String!
  version: String!
  createdBy: String!
}

input UpdateBindingInput {
  id: String!
  name: String!
  principalId: String!
  roleId: String!
  scopeRefId: String!
  version: String!
  updatedBy: String!
}

type User implements Principal & Resource {
  id: UUID!
  name: String!
  firstName: String!
  lastName: String!
  email: String!
  createdAt: String!
  updatedAt: String
  tenant: Tenant!
  createdBy: String
  updatedBy: String
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  tenantId: String!
}

input UpdateUserInput {
  id: String!
  firstName: String
  lastName: String
  email: String
  tenantId: String
}

type Group implements Principal & Resource {
  id: UUID!
  name: String!
  email: String!
  tenant: Tenant!
  description: String
  members: [User!]!
  createdAt: String!
  updatedAt: String
  createdBy: String
  updatedBy: String
}

input CreateGroupInput {
  name: String!
  email: String!
  tenantId: String!
  description: String
  members: [String!]!
}

input UpdateGroupInput {
  id: String!
  name: String
  email: String
  tenantId: String!
  description: String
  members: [String!]!
}


type Query {
  # getOrganization(id: UUID!): Organization
  # allOrganizations: [Organization!]!

  # getResource(id: UUID!): Resource
  # allResources: [Resource!]!

  # getRoot(id: UUID!): Root

  getTenant(id: UUID!): Tenant
  allTenants: [Tenant]

  getRole(id: UUID!): Role
  allRoles(id: UUID): [Role!]!

  getAllPermissions:[Permission]
  getPermission(id: UUID!):Permission

  getClientOrganizationUnit(id: UUID!): ClientOrganizationUnit
  allClientOrganizationUnits: [ClientOrganizationUnit!]!

  getAccount(id: UUID!): Account
  allAccounts: [Account!]!

  getBinding(id: String!): Binding
  allBindings: [Binding!]!
}

type Mutation {
  # createRoot(input: CreateRootInput!): Root!
  # updateRoot(input: UpdateRootInput!): Root!
  # deleteRoot(id: UUID!): Boolean!

  createTenant(input: CreateTenantInput!): Tenant!
  updateTenant(input: UpdateTenantInput!): Tenant!
  deleteTenant(id: UUID!): Boolean!

  createRole(input: CreateRoleInput!): Role!
  updateRole(input: UpdateRoleInput!): Role!
  deleteRole(id: UUID!): Boolean!

  createPermission(input: CreatePermission) : Permission
  deletePermission(id: UUID!): Boolean!
  updatePermission(input: UpdatePermission) : Permission

  createClientOrganizationUnit(
    input: CreateClientOrganizationUnitInput!
  ): ClientOrganizationUnit!
  updateClientOrganizationUnit(
    input: UpdateClientOrganizationUnitInput!
  ): ClientOrganizationUnit!
  deleteClientOrganizationUnit(id: UUID!): Boolean!

  createAccount(input: CreateAccountInput!): Account!
  updateAccount(input: UpdateAccountInput!): Account!
  deleteAccount(id: UUID!): Boolean!


  createBinding(input: CreateBindingInput!): Binding!
  updateBinding(input: UpdateBindingInput!): Binding!
  deleteBinding(id: String!): Boolean!
}